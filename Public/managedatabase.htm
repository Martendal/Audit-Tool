<h1>Manage Database</h1>

<style>
.tab {
	overflow: hidden;
	border: 1px solid #ccc;
	border-collapse: collapse;
	background-color: #f1f1f1;
	padding: 5px;
}

.tab button {
	background-color: inherit;
	float: left;
	border: none;
	outline: none;
	cursor: pointer;
	padding: 14px 16px;
	transition: 0.3s;
}

.tab button:hover {
	background-color: #ddd;
}

.tab button.active {
	background-color: #ccc;
}

.tabcontent {
	display: none;
	padding: 6px 12px;
	border: 1px solid #ccc;
	border-top: none;
}

td.borderL {
	width: auto;
	padding: 5px;
	border: 1px solid black;
	border-right: 0px;
}

td.borderR {
	width: auto;
	padding: 5px;
	border: 1px solid black;
	border-left: 0px;
}

td.borderC {
	width: auto;
	padding: 5px;
	border: 1px solid black;
	border-left: 0px;
	border-right: 0px;
}

.sombre {
	background-color: #f1f1f1;
	border-style: outset;
	border-radius: 5px;
	border: 3px;

}

.clair {
	background-color: #2fffff;
	border-style: outset;
	border-radius: 5px;
	border: 3px;
}

.rightSide {
	position: relative;
	right: 0px; 
}

.buttonAdd {
	background-image: url('/Icones/add_button.png');
	background-repeat: no-repeat;
	background-position: 50% 50%;
	background-color: transparent;

	width: 25px;
	height: 25px;
	border: none;
}

.buttonDelete {
	background-image: url('/Icones/delete_button.png');
	background-repeat: no-repeat;
	background-position: 50% 50%;
	background-color: transparent;

	width: 25px;
	height: 25px;
	border: none;
}

.buttonEdit {
	background-image: url('/Icones/edit_button.png');
	background-repeat: no-repeat;
	background-position: 50% 50%;
	background-color: transparent;

	width: 25px;
	height: 25px;
	border: none;
}

</style>

<script type="text/javascript" src="dbManager.js"></script>

<table id="MainTable">
	<tbody id="tabs">

	</tbody>
</table>

<div id="tab-content"></div>

<script type="text/javascript">

	var MainTable = document.getElementById('tabs'); // The table containing all the inforamtion (domain, questions, buttons, ...)
	var actualActiveTab; // The actual active tab
	var actualAction;		// The actual in progress action (add, edit, ...)

	/*************************************************************************************************/
	/*							Prints the elements to add a question to the database               	     	 */
	/*																		      		 			  	                   */
	/*	@Param parentQuestion    : the id of the button that launch the function							 */
	/*	@Param parentQuestionID  : the index where the parent question is located in retrieves data	 */
	/*	@Param domainID  		    : the index where the parent question is located in retrieves data 	 */
	/*************************************************************************************************/
	function addQuestion (parentQuestion, parentQuestionID, domainID, theForm)
	{		
		var domainsAndQuestions = JSON.parse(result.responseText);
		
		console.log ("domainID: ", domainID);
		console.log ("Array: ", domainsAndQuestions);
		console.log ("Domaine: ", domainsAndQuestions.domains[domainID].Nom);
		console.log ("Question: ", domainsAndQuestions.questions[domainID][parentQuestionID].Question);
		console.log ("Sous-question: ", theForm);
	}

	/*************************************************************************************************/
	/*							Prints the elements to add a question to the database               	     	 */
	/*																		      		 			  	                   */
	/*	@Param parentQuestion    : the id of the button that launch the function							 */
	/*	@Param parentQuestionID  : the index where the parent question is located in retrieves data	 */
	/*	@Param domainID  		    : the index where the parent question is located in retrieves data 	 */
	/*************************************************************************************************/
	function printAddQuestionElements (parentQuestion, parentQuestionID, domainID)
	{		
		var domainsAndQuestions = JSON.parse(result.responseText);
		var tableDataContainer = document.getElementById(parentQuestion);
		
		if (actualAction != null) actualAction.container.removeChild(actualAction.div);

		var newElement = document.createElement("div");
		var title = document.createElement("h3");
		var form = document.createElement("form");
		var textArea = document.createElement("input");
		var submit  =document.createElement("input");
		submit.setAttribute("type", "submit");
		form.setAttribute("id", "Submit" + parentQuestion);
		form.setAttribute("onsubmit", "addQuestion(\"" + parentQuestion + "\"," + parentQuestionID + "," + domainID + "," + JSON.stringify(form) + ")");
		title.appendChild(document.createTextNode("Ajout d'une sous-question"));
		textArea.setAttribute("type", "text");
		textArea.setAttribute("id", "Intitulé");
		textArea.setAttribute("placeholder", "Intitulé de la question");
		textArea.setAttribute("required", true);
		form.appendChild(textArea);
		form.appendChild(submit);

		newElement.appendChild(title);
		newElement.appendChild(form);
		tableDataContainer.appendChild(newElement);

		actualAction = { 
				container: tableDataContainer,
				div: newElement
		};

		console.log ("id: ", parentQuestion);
		console.log ("domainID: ", domainID);
		console.log ("Array: ", domainsAndQuestions);
		console.log ("Domaine: ", domainsAndQuestions.domains[domainID].Nom);
		console.log ("Question: ", domainsAndQuestions.questions[domainID][parentQuestionID].Question);
	}


	/******************************************************************************************/
	/*									Print the question of the desired domain               	     	*/
	/*																		      		 			  	            */
	/*	@Param domainID 				 : the index where the domain is located in retrieves data	*/
	/*	@Param domainsAndQuestions  : the retrieve data                                        */
	/******************************************************************************************/
	function putQuestionInForm (domainID, domainsAndQuestions)
	{
  		var questionID;	// The question in the database
  		var row;				// The row containing the question
  		var cell;			// The cell containing the question
  		var button;			// The different buttons (add, edit and delete)

  		for (var i = 0; i < domainsAndQuestions.questions[domainID].length; i++) 
  		{
		  	questionID = "Question " + domainsAndQuestions.questions[domainID][i].idquestion;

		  	row = MainTable.insertRow(i);
		  	cell = row.insertCell (0);

		  	/* Set row's attributes */
		  	row.setAttribute("id", "RowID " + i);
		  	if (i%2 == 0) row.setAttribute("class", "sombre");
		  	else row.setAttribute("class", "clair");
		  	/*-----------------------*/

		  	cell.setAttribute("id", questionID);
		  	cell.setAttribute("class", "borderL");
		  	cell.appendChild(document.createTextNode(domainsAndQuestions.questions[domainID][i].Question));

		  	/* Cell containing the add button */
			cell = row.insertCell (1);
			button = document.createElement("button");
		  	cell.setAttribute("class", "borderC");
			button.setAttribute("class", "buttonAdd");
			button.setAttribute("onClick", "printAddQuestionElements(\"" + questionID + "\"," + i + "," + domainID + ")");
			cell.appendChild (button);
			/*--------------------------------*/

			/* Cell containing the edit button */
			cell = row.insertCell (2);
			button = document.createElement("button");
		  	cell.setAttribute("class", "borderC");
			button.setAttribute("class", "buttonEdit");
			button.setAttribute("onClick", "printAddQuestionElements(\"" + questionID + "\"," + i + "," + domainID + ")");
			cell.appendChild (button);
			/*---------------------------------*/

			/* Cell containing the delete button */
			cell = row.insertCell (3);
		  	cell.setAttribute("class", "borderR");
			button = document.createElement("button");
			button.setAttribute("class", "buttonDelete");
			button.setAttribute("onClick", "printAddQuestionElements(\"" + questionID + "\"," + i + "," + domainID + ")");
			cell.appendChild (button);
			/*-----------------------------------*/

		}
	}


	/**********************************************************************************/
	/*					Print the question associated to the tab (here a domain)	     	    */
	/*																		      		 			  	    */
	/*	@Param triggerTabID : the ID of the tab that call this function					 */
	/*	@Param arrayID  	  : the index where the domain is located in retrieves data  */
	/**********************************************************************************/
	function printTabContent (triggerTabID, arrayID)
	{
		var activeTab = document.getElementById(triggerTabID);
		var classValue = activeTab.attributes.getNamedItem("class").value

		  if (classValue.includes("active")) return;	// The tab is already active so we don't need to print the content again

		  if (actualActiveTab != null)
		  {	// There is an active tab so we need to deletes its content from the view
		  		//console.log ("Num of Rows: ", MainTable.rows.length);
		  		while (MainTable.rows.length > 0) 
		  		{
		  			MainTable.deleteRow(0);
		  		}
		  		actualActiveTab.setAttribute ("class", actualActiveTab.attributes.getNamedItem("class").value.replace (" active", ""));
		  }

		  	actualActiveTab = activeTab;
		  	actualAction = null;
		  	classValue = classValue + " active";
		  	activeTab.setAttribute ("class", classValue);

		  	var domainsAndQuestions = JSON.parse(result.responseText);

		  	putQuestionInForm (arrayID, domainsAndQuestions);
		}

	/**********************************************************************************/
	/*					Retrieve the domains and questions from the database     	     	 */
	/**********************************************************************************/
	var result = $.get('/getDomains', array = function(domainsAndQuestions)
	{
		var newElement;
		var tabID;

		// Add the different domains as tab
		for (var i = 0; i < domainsAndQuestions.domains.length; i++) 
		{
			tabID = "Domaine " + domainsAndQuestions.domains[i].iddomaine;

		 	newElement = document.createElement("th");

		  	newElement.setAttribute("id", tabID);			// The ID of the tab
		  	newElement.setAttribute("class", "tab");		// The style of the tab
		  	newElement.setAttribute("type", "button");	// Tell that the tab is clackable
		  	newElement.setAttribute("onClick", "printTabContent(\"" + tabID + "\", " + i + ")");	// Set the function to call in case of click
		  	newElement.appendChild(document.createTextNode(domainsAndQuestions.domains[i].Nom));	// Add the domain name to the view

		  	MainTable.appendChild(newElement);	// Add the tab to the table
		}
	});
</script>